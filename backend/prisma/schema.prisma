generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// âœ… USERS TABLE (Primary Key Changed to Email, 3NF Compliant)
model User {
  email               String    @id @db.VarChar(255)  // Changed from id to email
  name                String    @db.VarChar(255)
  password_hash       String    @db.VarChar(255)
  role                String    @db.VarChar(50) @default("employee")
  primary_phone       String?   @db.VarChar(20)       // Moved from phone_numbers table
  last_login          DateTime?
  failed_attempts     Int       @default(0)
  is_active           Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  // Relations
  phone_numbers       UserPhoneNumber[]
  supplies            Supply[]
  approvedOrders      Order[]  @relation("OrderApprover")
  requestedOrders     Order[]  @relation("OrderRequester")
  admin               Admin?
  employee            Employee?
  supervises          Supervision[] @relation("supervisor")
  supervisedBy        Supervision[] @relation("supervisee")

  @@index([role])
  @@index([email])
  @@map("users")
}

// âœ… USER PHONE NUMBERS (2NF Fixed - Removed is_primary column)
model UserPhoneNumber {
  id         Int    @id @default(autoincrement())
  user_email String // Changed from user_id to user_email
  phone      String @db.VarChar(20)
  phone_type String @db.VarChar(20) @default("secondary") // Instead of is_primary
  created_at DateTime @default(now())
  
  user       User   @relation(fields: [user_email], references: [email], onDelete: Cascade)
  
  @@unique([user_email, phone])
  @@map("user_phone_numbers")
}

// âœ… ADMINS (Simplified)
model Admin {
  user_email     String @id
  admin_level    Int    @default(1)
  department     String? @db.VarChar(100)
  appointed_at   DateTime @default(now()) // Moved from supervisions
  
  user           User   @relation(fields: [user_email], references: [email], onDelete: Cascade)
  
  @@map("admins")
}

// âœ… EMPLOYEES (3NF Fixed - Removed permission columns)
model Employee {
  user_email    String   @id
  department    String   @db.VarChar(100)
  employee_id   String?  @db.VarChar(50)
  join_date     DateTime @db.Date
  salary        Decimal? @db.Decimal(10, 2)
  // Removed: can_manage_medicines, can_manage_stores, etc. (3NF violation)
  // Permissions now determined by role + department combination
  
  user          User     @relation(fields: [user_email], references: [email], onDelete: Cascade)
  
  @@map("employees")
}

// âœ… SUPERVISIONS (2NF Fixed - Removed assigned_at column)
model Supervision {
  id                     Int       @id @default(autoincrement())
  supervisor_email       String    // Changed from supervisor_id
  supervisee_email       String    // Changed from supervisee_id
  relationship_start     DateTime  @default(now()) // Specific to this relationship
  relationship_end       DateTime?
  notes                  String?   @db.Text
  // Removed: assigned_at (was causing partial dependency)
  
  supervisor             User      @relation("supervisor", fields: [supervisor_email], references: [email], onDelete: Cascade)
  supervisee             User      @relation("supervisee", fields: [supervisee_email], references: [email], onDelete: Cascade)

  @@unique([supervisor_email, supervisee_email])
  @@map("supervisions")
}

// âœ… MEDICINES (3NF Fixed - Removed price column)
model Medicine {
  id                      Int       @id @default(autoincrement())
  name                    String    @db.VarChar(255)
  company                 String    @db.VarChar(255)
  batch_number            String?   @db.VarChar(100)
  date_of_manufacture     DateTime  @db.Date
  date_of_expiry          DateTime  @db.Date
  // Removed: price (was causing transitive dependency name,company -> price)
  dosage_form             String?   @db.VarChar(100)  // tablet, syrup, injection
  strength                String?   @db.VarChar(50)   // 500mg, 10ml
  stock_quantity          Int       @default(0)
  minimum_stock           Int       @default(10)
  last_restocked_quantity Int?
  restocked_at            DateTime?
  restocked_by            String?   // User email
  stock_notes             String?   @db.Text
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  
  supplies                Supply[]
  orderRequests           Order[]

  @@index([name])
  @@index([company])
  @@index([date_of_expiry])
  @@unique([name, company, batch_number]) // Ensures unique medicine batches
  @@map("medicines")
}

// âœ… MEDICAL STORES (3NF Fixed - Removed pin_code column)
model MedicalStore {
  store_id          Int       @id @default(autoincrement())
  store_name        String    @db.VarChar(255)
  city              String    @db.VarChar(100)
  state             String    @db.VarChar(100)
  // Removed: pin_code (was causing transitive dependency city,state -> pin_code)
  street_address    String    @db.VarChar(255)    // Full address instead
  contact_person    String?   @db.VarChar(255)
  phone             String?   @db.VarChar(20)
  email             String?   @db.VarChar(255)
  license_number    String?   @db.VarChar(100)
  is_active         Boolean   @default(true)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  supplies          Supply[]
  orderRequests     Order[]

  @@index([store_name])
  @@index([city, state])
  @@map("medical_stores")
}

// âœ… SUPPLIES (2NF Fixed - Removed unique constraint and modified structure)
model Supply {
  supply_id          Int          @id @default(autoincrement())
  medicine_id        Int
  store_id           Int
  user_email         String       // Changed from user_id
  quantity           Int
  supply_date        DateTime     @db.Date
  status             String       @default("pending") @db.VarChar(50)
  unit_price         Decimal      @db.Decimal(10, 2)  // Price at time of supply
  total_amount       Decimal      @db.Decimal(12, 2)  // quantity * unit_price
  batch_info         String?      @db.VarChar(255)
  expiry_date        DateTime?    @db.Date            // Expiry of this batch
  notes              String?      @db.Text
  created_at         DateTime     @default(now())
  
  // Removed: @@unique([medicine_id, store_id, supply_date]) - was causing 2NF violation
  
  medicine           Medicine     @relation(fields: [medicine_id], references: [id], onDelete: Cascade)
  store              MedicalStore @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  user               User         @relation(fields: [user_email], references: [email], onDelete: Cascade)

  @@index([medicine_id])
  @@index([store_id])
  @@index([user_email])
  @@index([supply_date])
  @@map("supplies")
}

// âœ… ORDERS (Updated with email references)
model Order {
  order_id        Int          @id @default(autoincrement())
  medicine_id     Int
  store_id        Int
  requester_email String?      // Changed from requester_id
  approver_email  String?      // Changed from approver_id
  quantity        Int
  requested_price Decimal?     @db.Decimal(10, 2)  // Price requested
  approved_price  Decimal?     @db.Decimal(10, 2)  // Final approved price
  order_date      DateTime     @default(now())
  status          String       @default("pending") @db.VarChar(50)
  priority        String       @default("normal") @db.VarChar(20)
  notes           String?      @db.Text
  approved_at     DateTime?
  delivered_at    DateTime?
  created_at      DateTime     @default(now())
  
  medicine        Medicine     @relation(fields: [medicine_id], references: [id], onDelete: Cascade)
  store           MedicalStore @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  approver        User?        @relation("OrderApprover", fields: [approver_email], references: [email])
  requester       User?        @relation("OrderRequester", fields: [requester_email], references: [email])

  @@index([medicine_id])
  @@index([store_id])
  @@index([approver_email])
  @@index([requester_email])
  @@index([status])
  @@index([order_date])
  @@map("orders")
}

// ðŸ“‹ MINIMAL NEW TABLES (Only when absolutely necessary)

// âœ… MEDICINE PRICING (Only new table needed for 3NF compliance)
model MedicinePricing {
  id                Int      @id @default(autoincrement())
  medicine_name     String   @db.VarChar(255)
  company           String   @db.VarChar(255)
  current_price     Decimal  @db.Decimal(10, 2)
  effective_date    DateTime @db.Date
  expiry_date       DateTime? @db.Date
  price_type        String   @db.VarChar(50) @default("standard") // standard, bulk, promotional
  created_by        String   @db.VarChar(255) // User email
  created_at        DateTime @default(now())
  
  @@unique([medicine_name, company, effective_date])
  @@index([medicine_name, company])
  @@index([effective_date])
  @@map("medicine_pricing")
}

// âœ… SYSTEM PERMISSIONS (Replaces department permissions - minimal approach)
model SystemPermission {
  id                Int     @id @default(autoincrement())
  role              String  @db.VarChar(50)
  department        String  @db.VarChar(100)
  permission_type   String  @db.VarChar(50) // 'manage_medicines', 'approve_orders', etc.
  is_granted        Boolean @default(false)
  created_at        DateTime @default(now())
  
  @@unique([role, department, permission_type])
  @@index([role])
  @@index([department])
  @@map("system_permissions")
}
