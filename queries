SELECT company, COUNT(*) as medicine_count, AVG(stock_quantity) as avg_stock
FROM medicines 
GROUP BY company 
HAVING COUNT(*) > 2 AND AVG(stock_quantity) > 50;

SELECT name, company, date_of_expiry, stock_quantity
FROM medicines
ORDER BY date_of_expiry ASC, stock_quantity DESC;

SELECT o.order_id, m.name as medicine_name, ms.store_name, 
       o.quantity, o.status, o.order_date
FROM orders o
INNER JOIN medicines m ON o.medicine_id = m.id
INNER JOIN medical_stores ms ON o.store_id = ms.store_id;


- Complex boolean conditions
-- Order status filtering
SELECT * FROM orders
WHERE (status = 'pending' OR status = 'approved')
  AND quantity > 50
  AND NOT (priority = 'low' AND requested_price > 1000);


  SELECT s.supply_id, s.quantity, s.unit_price,
       s.total_amount,
       (s.total_amount / s.quantity) as calculated_unit_price,
       (s.total_amount * 0.1) as tax_amount,
       (s.total_amount + (s.total_amount * 0.1)) as total_with_tax,
       ROUND((s.total_amount / s.quantity) * 1.2, 2) as suggested_selling_price
FROM supplies s;

SELECT * FROM medicines 
WHERE name ILIKE '%para%' 
   OR name LIKE 'A%' 
   OR company LIKE '%Pharma%'
   OR batch_number LIKE 'BATCH-____-___';


   SELECT m.name, m.date_of_expiry,
       TO_CHAR(m.date_of_expiry, 'DD/MM/YYYY') as formatted_expiry,
       TO_CHAR(m.date_of_expiry, 'Month YYYY') as expiry_month_year,
       TO_CHAR(m.created_at, 'Day, DD-Mon-YYYY HH24:MI:SS') as created_formatted,
       EXTRACT(YEAR FROM m.date_of_expiry) as expiry_year,
       EXTRACT(MONTH FROM m.date_of_expiry) as expiry_month,
       EXTRACT(DAY FROM m.date_of_expiry) as expiry_day
FROM medicines m;


SELECT id, name, company, stock_quantity, dosage_form
FROM medicines 
WHERE company IN ('Sun Pharma', 'Cipla', 'Dr Reddy', 'Lupin', 'Aurobindo')
ORDER BY company, name;



SELECT id, name, company, stock_quantity, minimum_stock
FROM medicines 
WHERE stock_quantity NOT BETWEEN minimum_stock AND (minimum_stock * 3)
ORDER BY stock_quantity;

SELECT id, name, company, stock_quantity
FROM medicines 
WHERE company NOT IN ('Sun Pharma', 'Cipla', 'Dr Reddy', 'Lupin')
ORDER BY company, name;


SELECT email as contact, 'email' as contact_type, email as user_ref
FROM users
WHERE is_active = true
UNION
SELECT phone as contact, 'phone' as contact_type, user_email as user_ref
FROM user_phone_numbers
UNION
SELECT primary_phone as contact, 'primary_phone' as contact_type, email as user_ref
FROM users
WHERE primary_phone IS NOT NULL
ORDER BY user_ref, contact_type;

SELECT email, name, role
FROM users u
WHERE EXISTS (
    SELECT 1 FROM supplies s 
    WHERE s.user_email = u.email
)


